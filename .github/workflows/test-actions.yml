name: Test Actions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-podman-setup:
    name: Test Podman Setup Action
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cache: [true, false]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Setup Podman as Docker
        uses: ./setup-podman-docker
        id: podman
        with:
          disable-docker: true
          cache-storage: ${{ matrix.cache }}

      - name: Verify Podman Setup
        if: matrix.cache == false
        run: |
          echo "Socket path: ${{ steps.podman.outputs.socket-path }}"
          echo "Docker host: ${{ steps.podman.outputs.docker-host }}"
          echo "Podman version: ${{ steps.podman.outputs.podman-version }}"
          
          # Test Docker CLI works
          docker run --rm alpine echo "Hello from Podman backend"
          
          # Test Podman directly
          podman run --rm alpine echo "Hello from Podman"

  test-devcontainer-minimal:
    name: Test Devcontainer Actions (Minimal)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create minimal devcontainer
        run: |
          mkdir -p .devcontainer
          cat > .devcontainer/devcontainer.json <<EOF
          {
            "name": "Test Container",
            "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
            "postCreateCommand": "echo 'Container ready'"
          }
          EOF

      - name: Build devcontainer
        id: build
        uses: ./devcontainer-build
        with:
          workspace-folder: .

      - name: Test basic command
        uses: ./devcontainer-exec
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'echo "Test successful"'

      - name: Cleanup
        if: always()
        uses: ./devcontainer-cleanup
        with:
          container-id: ${{ steps.build.outputs.container-id }}

  test-modular-devcontainer:
    name: Test Modular Devcontainer Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test devcontainer with Go
        run: |
          mkdir -p .devcontainer
          cat > .devcontainer/devcontainer.json <<EOF
          {
            "name": "Go Test Container",
            "image": "mcr.microsoft.com/devcontainers/go:1.21",
            "postCreateCommand": "go version"
          }
          EOF

          # Create a simple Go project
          mkdir -p testapp
          cat > testapp/main.go <<'GOEOF'
package main

import "fmt"

func Hello() string { return "Hello, World!" }
func main()          { fmt.Println(Hello()) }
GOEOF

          cat > testapp/main_test.go <<'GOEOF'
package main

import "testing"

func TestHello(t *testing.T) {
	if got := Hello(); got != "Hello, World!" {
		t.Errorf("Hello() = %v, want %v", got, "Hello, World!")
	}
}
GOEOF

          cat > go.mod <<EOF
          module testapp
          go 1.21
          EOF

      - name: Setup Podman as Docker
        uses: ./setup-podman-docker
        with:
          disable-docker: true

      - name: Build devcontainer
        id: build
        uses: ./devcontainer-build
        with:
          workspace-folder: .
          container-runtime: podman

      - name: Run Go tests
        uses: ./devcontainer-exec
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'cd /workspaces/github-actions && go test -v ./...'
          container-runtime: podman

      - name: Run Go vet
        uses: ./devcontainer-exec
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'cd /workspaces/github-actions && go vet ./...'
          container-runtime: podman

      - name: Run Go fmt check
        uses: ./devcontainer-exec
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'cd /workspaces/github-actions && test -z "$(gofmt -l .)"'
          container-runtime: podman

      - name: Cleanup devcontainer
        if: always()
        uses: ./devcontainer-cleanup
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          container-runtime: podman

  test-error-handling:
    name: Test Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test missing devcontainer.json
        id: missing-config
        continue-on-error: true
        uses: ./devcontainer-build
        with:
          workspace-folder: .

      - name: Verify error was caught
        run: |
          if [[ "${{ steps.missing-config.outcome }}" != "failure" ]]; then
            echo "Expected failure for missing devcontainer.json"
            exit 1
          fi
