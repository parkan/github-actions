name: Modular Devcontainer Example
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup Podman (optional, if you want to use Podman instead of Docker)
      - name: Setup Podman
        uses: parkan/github-actions/setup-podman-docker@v1
        with:
          disable-docker: true

      # Build the devcontainer once
      - name: Build devcontainer
        id: build
        uses: parkan/github-actions/devcontainer-build@v1
        with:
          workspace-folder: .
          container-runtime: podman

      # Run multiple separate checks - each will show as passed/failed
      - name: Run tests
        uses: parkan/github-actions/devcontainer-exec@v1
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'go test -v ./...'

      - name: Run vet
        uses: parkan/github-actions/devcontainer-exec@v1
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'go vet ./...'

      - name: Check formatting
        uses: parkan/github-actions/devcontainer-exec@v1
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'test -z "$(gofmt -l .)"'

      - name: Run linter
        uses: parkan/github-actions/devcontainer-exec@v1
        with:
          container-id: ${{ steps.build.outputs.container-id }}
          command: 'golangci-lint run'

      # Cleanup at the end
      - name: Cleanup
        if: always()
        uses: parkan/github-actions/devcontainer-cleanup@v1
        with:
          container-id: ${{ steps.build.outputs.container-id }}
