name: 'Devcontainer Cleanup'
description: 'Stop and remove a devcontainer'
author: 'parkan'

inputs:
  container-id:
    description: 'ID of the devcontainer to cleanup'
    required: false
    default: ''
  workspace-folder:
    description: 'Path to workspace folder (for devcontainer down)'
    required: false
    default: '.'
  container-id-label:
    description: 'Label to identify containers to cleanup (if container-id not provided)'
    required: false
    default: 'ci=devcontainer'
  container-runtime:
    description: 'Container runtime (docker or podman)'
    required: false
    default: 'auto'

runs:
  using: 'composite'
  steps:
    - name: Detect container runtime
      id: runtime
      shell: bash
      run: |
        set -euo pipefail

        RUNTIME="${{ inputs.container-runtime }}"

        # Auto-detect if not specified
        if [[ "${RUNTIME}" == "auto" ]]; then
          if [[ -n "${DOCKER_HOST:-}" ]]; then
            # Check if it's actually Podman
            if docker version 2>&1 | grep -q "podman"; then
              RUNTIME="podman"
            else
              RUNTIME="docker"
            fi
          elif command -v podman >/dev/null 2>&1; then
            RUNTIME="podman"
          elif command -v docker >/dev/null 2>&1; then
            RUNTIME="docker"
          else
            echo "::warning::No container runtime found, skipping cleanup"
            echo "runtime=none" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        echo "runtime=${RUNTIME}" >> $GITHUB_OUTPUT

    - name: Cleanup devcontainer
      shell: bash
      continue-on-error: true
      run: |
        set -euo pipefail
        echo "::group::Cleaning up devcontainer"

        RUNTIME="${{ steps.runtime.outputs.runtime }}"

        if [[ "${RUNTIME}" == "none" ]]; then
          echo "No runtime available, skipping cleanup"
          exit 0
        fi

        # Try to stop using devcontainer CLI first if workspace exists
        if [[ -d "${{ inputs.workspace-folder }}" ]]; then
          cd "${{ inputs.workspace-folder }}"
          if command -v devcontainer >/dev/null 2>&1; then
            devcontainer down --workspace-folder . 2>/dev/null || true
          fi
        fi

        # Manual cleanup by container ID
        if [[ -n "${{ inputs.container-id }}" ]]; then
          CONTAINER_ID="${{ inputs.container-id }}"
          echo "Cleaning up container: ${CONTAINER_ID}"

          if [[ "${RUNTIME}" == "podman" ]]; then
            podman stop "${CONTAINER_ID}" 2>/dev/null || true
            podman rm -f "${CONTAINER_ID}" 2>/dev/null || true
          else
            docker stop "${CONTAINER_ID}" 2>/dev/null || true
            docker rm -f "${CONTAINER_ID}" 2>/dev/null || true
          fi
        fi

        # Fallback: cleanup by label
        if [[ -n "${{ inputs.container-id-label }}" ]]; then
          echo "Cleaning up containers with label: ${{ inputs.container-id-label }}"

          if [[ "${RUNTIME}" == "podman" ]]; then
            CONTAINERS=$(podman ps -q --filter "label=${{ inputs.container-id-label }}" 2>/dev/null || true)
            if [[ -n "${CONTAINERS}" ]]; then
              echo "${CONTAINERS}" | xargs -r podman stop 2>/dev/null || true
              echo "${CONTAINERS}" | xargs -r podman rm -f 2>/dev/null || true
            fi
          else
            CONTAINERS=$(docker ps -q --filter "label=${{ inputs.container-id-label }}" 2>/dev/null || true)
            if [[ -n "${CONTAINERS}" ]]; then
              echo "${CONTAINERS}" | xargs -r docker stop 2>/dev/null || true
              echo "${CONTAINERS}" | xargs -r docker rm -f 2>/dev/null || true
            fi
          fi
        fi

        echo "Cleanup complete"
        echo "::endgroup::"

    - name: Output summary
      shell: bash
      run: |
        cat >> $GITHUB_STEP_SUMMARY <<EOF
        ## Devcontainer Cleanup Complete

        Container cleanup finished successfully.
        EOF
